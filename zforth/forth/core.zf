
( system calls )

: emit    0 sys ;
: .       1 sys ;
: type    2 sys ;
: dump    3 sys ;
: quit    128 sys ;
: puts    129 sys ;
: include 130 sys ;
: save    131 sys ;
: .s      132 sys ;
: cells   133 sys * ;

( dictionary access. These are shortcuts through the primitive operations are !!, @@ and ,, )

: !    0 !! ;
: @    0 @@ ;
: ,    0 ,, ;
: #    0 ## ;


( compiler state )

: [ 0 compiling ! ; immediate
: ] 1 compiling ! ;
: postpone 1 _postpone ! ; immediate


( some operators and shortcuts )

: over 1 pick ;
: +!   dup @ rot + swap ! ;
: 1+   1 + ;
: 1-   1 - ;
: inc  1 swap +! ;
: dec  -1 swap +! ;
: <    - <0 ;
: >    swap < ;
: <=   over over >r >r < r> r> = + ;
: >=   swap <= ;
: =0   0 = ;
: not  =0 ;
: !=   = not ;
: cr   10 emit ;
: ..   dup . ;
: here h @ ;
: temp tmp @ ;


( memory management )

: cells 8 ;
: allot  h +!  ;
: variable create 0 , ;


( 'begin' gets the current address, a jump or conditional jump back is generated
  by 'again', 'until' or 'times' )

: begin   here ; immediate
: again   ['] jmp , , ; immediate
: until   ['] jmp0 , , ; immediate
: times ['] 1 - , ['] dup , ['] =0 , postpone until ; immediate


( 'if' prepares conditional jump, address will be filled in by 'else' or 'fi' )

: if      ['] jmp0 , here 999 , ; immediate
: unless  ['] not , postpone if ; immediate
: else    ['] jmp , here 999 , swap here swap ! ; immediate
: fi      here swap ! ; immediate


( forth style 'do' and 'loop', including loop iterators 'i' and 'j' )

: i ['] lit , 0 , ['] pickr , ; immediate
: j ['] lit , 2 , ['] pickr , ; immediate
: do ['] swap , ['] >r , ['] >r , here ; immediate
: loop+ ['] r> , ['] + , ['] dup , ['] >r , ['] lit , 1 , ['] pickr , ['] > , ['] jmp0 , , ['] r> , ['] drop , ['] r> , ['] drop , ; immediate
: loop ['] lit , 1 , postpone loop+ ;  immediate

( string )

: ." postpone s" puts ;
: str.len dup 1- begin 1+ dup @ =0 until swap - ;
: count dup str.len ;

( methods for handling the dictionary )

( 'dic.next' increases the given dictionary address by the size of the cell
  located at that address )

: dic.next dup # + ;

( 'words' generates a list of all define words )

: name dup @ 31 & swap dic.next dup dic.next rot type @ ;
: words latest @ begin name 32 emit dup 0 = until cr drop ;



." Welcome to zForth, " here . ." bytes used" cr ;



